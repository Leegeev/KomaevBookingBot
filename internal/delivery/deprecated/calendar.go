package telegram

import (
	"fmt"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func monthStart(d time.Time) time.Time {
	return time.Date(d.Year(), d.Month(), 1, 0, 0, 0, 0, d.Location())
}

func buildCalendarMarkup(current time.Time, officeTZ *time.Location) tgbotapi.InlineKeyboardMarkup {
	cur := monthStart(current.In(officeTZ))

	// –ù–∞–≤–∏–≥–∞—Ü–∏—è
	prev := cur.AddDate(0, -1, 0)
	next := cur.AddDate(0, +1, 0)
	header := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("¬´", fmt.Sprintf("calnav:%s", prev.Format("2006-01-02"))),
		tgbotapi.NewInlineKeyboardButtonData(cur.Format("January 2006"), "noop"),
		tgbotapi.NewInlineKeyboardButtonData("¬ª", fmt.Sprintf("calnav:%s", next.Format("2006-01-02"))),
	)

	// –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
	wd := tgbotapi.NewInlineKeyboardRow(
		btnNoop("–ü–Ω"), btnNoop("–í—Ç"), btnNoop("–°—Ä"),
		btnNoop("–ß—Ç"), btnNoop("–ü—Ç"), btnNoop("–°–±"), btnNoop("–í—Å"),
	)

	rows := [][]tgbotapi.InlineKeyboardButton{header, wd}

	firstWD := int(cur.Weekday())
	if firstWD == 0 { // Sunday
		firstWD = 7
	}

	row := []tgbotapi.InlineKeyboardButton{}
	for i := 1; i < firstWD; i++ {
		row = append(row, btnNoop(" "))
	}

	daysInMonth := cur.AddDate(0, 1, -1).Day()
	for day := 1; day <= daysInMonth; day++ {
		date := time.Date(cur.Year(), cur.Month(), day, 0, 0, 0, 0, officeTZ)
		data := fmt.Sprintf("calpick:%s", date.Format("2006-01-02"))
		row = append(row, tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("%2d", day), data))
		if len(row) == 7 {
			rows = append(rows, row)
			row = []tgbotapi.InlineKeyboardButton{}
		}
	}
	if len(row) > 0 {
		for len(row) < 7 {
			row = append(row, btnNoop(" "))
		}
		rows = append(rows, row)
	}

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

func btnNoop(text string) tgbotapi.InlineKeyboardButton {
	return tgbotapi.NewInlineKeyboardButtonData(text, "noop")
}

func buildCalendar(start time.Time) tgbotapi.InlineKeyboardMarkup {
	// –û–ø—Ä–µ–¥–µ–ª–∏–º –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
	offset := int(start.Weekday()) - 1 // –ü–Ω=0 ... –í—Å=6
	if offset < 0 {
		offset = 6 // –µ—Å–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
	}
	monday := start.AddDate(0, 0, -offset)

	// –°—Ç—Ä–æ–∫–∞ 1 ‚Äî –Ω–∞–≤–∏–≥–∞—Ü–∏—è
	row1 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚è™", "book:calendar_nav:-1"),
		tgbotapi.NewInlineKeyboardButtonData("‚è©", "book:calendar_nav:+1"),
	)

	// –°—Ç—Ä–æ–∫–∞ 2 ‚Äî –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
	daysOfWeek := []string{"–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"}
	row2 := make([]tgbotapi.InlineKeyboardButton, 0, 7)
	for _, day := range daysOfWeek {
		row2 = append(row2, tgbotapi.NewInlineKeyboardButtonData(day, "noop"))
	}

	// –°—Ç—Ä–æ–∫–∞ 3 ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã
	row3 := make([]tgbotapi.InlineKeyboardButton, 0, 7)
	for i := 0; i < 7; i++ {
		day := monday.AddDate(0, 0, i)
		display := day.Format("02.01")
		callback := fmt.Sprintf("book:calendar:%s", day.Format("2006-01-02"))
		row3 = append(row3, tgbotapi.NewInlineKeyboardButtonData(display, callback))
	}

	// –°—Ç—Ä–æ–∫–∞ 4 ‚Äî –ù–∞–∑–∞–¥
	row4 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "book:list_back"),
	)

	return tgbotapi.NewInlineKeyboardMarkup(row1, row2, row3, row4)
}





	// –°—Ç—Ä–æ–∫–∞ 2 ‚Äî –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
	row2 := make([]tgbotapi.InlineKeyboardButton, 0, 7)
	daysOfWeek := []string{"–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"}
	today := time.Now()
	todayW := int(today.Weekday())
	for i := 0; i < 7; i++ {
		dayIndex := (todayW + i) % 7
		row2 = append(row2, tgbotapi.NewInlineKeyboardButtonData(daysOfWeek[dayIndex], "noop"))
	}

	// –°—Ç—Ä–æ–∫–∞ 3 ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã
	row3 := make([]tgbotapi.InlineKeyboardButton, 0, 7)
	for i := 0; i < 7; i++ {
		day := today.AddDate(0, 0, i)
		display := day.Format("02.01")
		callback := fmt.Sprintf("book:calendar:%s", day.Format("2006-01-02"))
		row3 = append(row3, tgbotapi.NewInlineKeyboardButtonData(display, callback))
	}
