package tools

import (
	"fmt"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/leegeev/KomaevBookingBot/internal/domain"
)

// Step -1.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
func BuildBlankInlineKB() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.InlineKeyboardMarkup{InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{}}
}

func BuildBackInlineKBButton(data string) tgbotapi.InlineKeyboardButton {
	return tgbotapi.NewInlineKeyboardButtonData(TextBackInlineKBButton, data)
}

// Step 0.
// /book –°—Ç—Ä–æ–∏—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∫–∞–º–∏
func BuildRoomListKB(rooms []domain.Room) [][]tgbotapi.InlineKeyboardButton {
	rows := make([][]tgbotapi.InlineKeyboardButton, 0, len(rooms))
	for _, room := range rooms {
		if !room.IsActive {
			continue
		}
		btnText := fmt.Sprintf("#%s", room.Name)
		data := fmt.Sprintf("book:list:%d", room.ID)
		btn := tgbotapi.NewInlineKeyboardButtonData(btnText, data)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
	}

	// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(BuildBackInlineKBButton("book:list_back")))

	return rows
}

// Step 1.
// –°—Ç—Ä–æ–∏—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ —Ö–µ–Ω–¥–ª–µ—Ä–∞.
func BuildCalendarKB(shift int64) tgbotapi.InlineKeyboardMarkup {
	if shift < 0 {
		shift = 0
	}

	// –°—Ç—Ä–æ–∫–∞ 1 ‚Äî –Ω–∞–≤–∏–≥–∞—Ü–∏—è
	row1 := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚è™", fmt.Sprintf("book:calendar_nav:%d", shift-1)),
		tgbotapi.NewInlineKeyboardButtonData("‚è©", fmt.Sprintf("book:calendar_nav:%d", shift+1)),
	)
	// –°—Ç—Ä–æ–∫–∞ 2 ‚Äî –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏; –°—Ç—Ä–æ–∫–∞ 3 ‚Äî –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã
	row2 := make([]tgbotapi.InlineKeyboardButton, 0, 7)
	row3 := make([]tgbotapi.InlineKeyboardButton, 0, 7)

	now := time.Now()
	daysOfWeek := []string{"–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"}
	todayW := int(now.Weekday())                   // –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ –¢–ï–ö–£–©–ï–ô –Ω–µ–¥–µ–ª–µ
	shiftedDate := now.AddDate(0, 0, 7*int(shift)) // –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç—Å—á–µ—Ç–∞ –¥–∞—Ç

	if todayW == 0 { // –¢–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –º–µ–Ω—è–µ–º –Ω–∞ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è daysOfWeek
		todayW = 6
	} else {
		todayW -= 1 // –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, —Ç–æ -1 —á—Ç–æ–±—ã –¥–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞–ª–∏
	}

	if shift != 0 {
		shiftedDate = shiftedDate.AddDate(0, 0, -todayW)
		todayW = -1 // –ï—Å–ª–∏ shift != 0, –∑–Ω–∞—á–∏—Ç –º—ã —Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ –¥—Ä—É–≥–æ–π –Ω–µ–¥–µ–ª–∏ –∏ —Ç–∞–º –≤—Å–µ –¥–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã
	}

	var row3display, callback string
	for i := 0; i < 7; i++ {
		row2display := daysOfWeek[i]
		date := shiftedDate.AddDate(0, 0, i)
		if todayW > i {
			row3display = "‚ùå"
			callback = ""
		} else {
			row3display = date.Format("02.01")
			callback = fmt.Sprintf("book:calendar:%s", date.Format("2006-01-02"))
		}
		row2 = append(row2, tgbotapi.NewInlineKeyboardButtonData(row2display, callback))
		row3 = append(row3, tgbotapi.NewInlineKeyboardButtonData(row3display, callback))
	}

	// –°—Ç—Ä–æ–∫–∞ 4 ‚Äî –ù–∞–∑–∞–¥
	row4 := tgbotapi.NewInlineKeyboardRow(BuildBackInlineKBButton("book:calendar_back"))

	return tgbotapi.NewInlineKeyboardMarkup(row1, row2, row3, row4)
}

// Step 2.
// –°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—Ä–æ–Ω–∏.
func BuildDurationKB() tgbotapi.InlineKeyboardMarkup {
	rows := make([][]tgbotapi.InlineKeyboardButton, 0, 4)

	for i := 1; i <= 8; i += 2 {
		// (0.5, 1.5, 2.5, 3.5)
		left := float64(i) * 0.5
		// (1.0, 2.0, 3.0, 4.0)
		right := float64(i+1) * 0.5

		leftBtn := tgbotapi.NewInlineKeyboardButtonData(
			formatDurationButtonText(left),
			fmt.Sprintf("book:duration:%.1f", left),
		)
		rightBtn := tgbotapi.NewInlineKeyboardButtonData(
			formatDurationButtonText(right),
			fmt.Sprintf("book:duration:%.1f", right),
		)

		row := tgbotapi.NewInlineKeyboardRow(leftBtn, rightBtn)
		rows = append(rows, row)
	}

	// –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(BuildBackInlineKBButton("book:duration_back")))

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

func BuildConfirmationKB() tgbotapi.InlineKeyboardMarkup {
	rows := make([][]tgbotapi.InlineKeyboardButton, 0, 2)
	// –ö–Ω–æ–ø–∫–∞ —Å
	yesBtn := tgbotapi.NewInlineKeyboardButtonData(
		"‚úÖ–í–µ—Ä–Ω–æ",
		fmt.Sprintf("book:confirm:%d", 1),
	)
	noBtn := tgbotapi.NewInlineKeyboardButtonData(
		"‚ùå–û—Ç–º–µ–Ω–∞",
		fmt.Sprintf("book:confirm:%d", 0),
	)
	row := tgbotapi.NewInlineKeyboardRow(yesBtn, noBtn)

	rows = append(rows, row)
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(BuildBackInlineKBButton("book:confirm_back")))
	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

func formatDurationButtonText(d float64) string {
	if d == float64(int64(d)) {
		return fmt.Sprintf("%.0f", d)
	}
	return fmt.Sprintf("%.1f", d)
}

func BuildMyListKB(bks []domain.Booking, OfficeTZ *time.Location) tgbotapi.InlineKeyboardMarkup {
	rows := make([][]tgbotapi.InlineKeyboardButton, 0, len(bks))
	for _, bk := range bks {
		start := bk.Range.Start.In(OfficeTZ)
		end := bk.Range.End.In(OfficeTZ)

		btnText := fmt.Sprintf("#%s ‚Äî %s %02d:%02d‚Äì%02d:%02d",
			bk.RoomName, start.Format("01-02"),
			start.Hour(), start.Minute(), end.Hour(), end.Minute())

		data := fmt.Sprintf("my:list:%d", bk.ID)

		btn := tgbotapi.NewInlineKeyboardButtonData(btnText, data)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(btn))
	}

	rows = append(rows, tgbotapi.NewInlineKeyboardRow(BuildBackInlineKBButton("my:back")))
	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

func BuildMyOperationsKB(bookingID int64) tgbotapi.InlineKeyboardMarkup {
	// rescheduleBtn := tgbotapi.NewInlineKeyboardButtonData("üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", fmt.Sprintf("my:reschedule:%d", bookingID))
	cancelBtn := tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", fmt.Sprintf("my:cancel:%d", bookingID))

	backBtn := BuildBackInlineKBButton("my:list_back")

	// row1 := tgbotapi.NewInlineKeyboardRow(rescheduleBtn, cancelBtn)
	row1 := tgbotapi.NewInlineKeyboardRow(cancelBtn)
	row2 := tgbotapi.NewInlineKeyboardRow(backBtn)

	return tgbotapi.NewInlineKeyboardMarkup(row1, row2)
}

func BuildMainMenuKB(role string) tgbotapi.ReplyKeyboardMarkup {
	// —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∫–Ω–æ–ø–æ–∫
	row1 := tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üóì –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"),
		tgbotapi.NewKeyboardButton("üìã –ú–æ–∏ –±—Ä–æ–Ω–∏"),
	)
	row2 := tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
	)

	rows := [][]tgbotapi.KeyboardButton{row1, row2}

	// –µ—Å–ª–∏ –∞–¥–º–∏–Ω ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –µ—â—ë —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
	if CheckRoleIsAdmin(role) {
		row3 := tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É"),
			tgbotapi.NewKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É"),
		)
		rows = append(rows, row3)
	}

	// —Å–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	kb := tgbotapi.NewReplyKeyboard(rows...)
	kb.ResizeKeyboard = true
	kb.OneTimeKeyboard = false

	return kb
}
